scalar DateTime
type User {
  id: ID!
  username: String!
  displayName: String
  photoUrl: String
  companyId: ID!
  timestamp: DateTime
}

type Company {
  id: ID!
  name: String!
  photoUrl: String
}

type Group {
  id: ID!
  name: String!
  description: String
  photoUrl: String
}

type Message {
  id: ID!
  senderId: ID!
  receiverId: ID!
  groupId: ID!
  content: String
  mediaUrl: String
  timestamp: DateTime!
}

type ChatMessages {
  senderId: ID!
  messages: [Message!]!
}

type Query {
  group(id: ID!): Group
  Messages(userId: ID!, since: DateTime!): [Message!]!
  ChatMessages(userId: ID!, since: DateTime!): [ChatMessages!]!
  GetUsers(userId: ID): [User!]!
}

type Subscription {
  NewMessages(userId: ID!, since: DateTime!): [ChatMessages!]!
}

type Mutation {
  postMessage(
    senderId: ID!
    receiverId: ID
    groupId: ID
    content: String!
    mediaUrl: String
  ): Message

  createGroup(name: String!, userIds: [ID!]!): Group

  addUserToGroup(userId: ID!, groupId: ID!): Group

  deleteUserFromGroup(userId: ID!, groupId: ID!): Group

  modifyGroupUsers(groupId: ID!, userIds: [ID!]!): Group

  createCompany(name: String!, photoUrl: String): Company
}
